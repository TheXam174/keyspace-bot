import telebot
import json
import os
import requests
import time
import threading
import uuid
from telebot import types
from datetime import datetime

TOKEN = "7584995126:AAFY5RMpeJW2pJzSy2ul6uaSslB5Jnyhxh4"
ADMIN_ID = 6668575839
bot = telebot.TeleBot(TOKEN)

goods_file = "goods.json"
subs_file = "subscriptions.json"

sources = {
    "VPN": [
        "https://raw.githubusercontent.com/dan1471/FREE-VPN/main/vpn.txt",
        "https://outlinekeys.com/api/vpn",
        "https://openkeys.net/api/vpn"
    ],
    "VPN Premium": [
        "https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt",
        "https://outlinekeys.com/api/premium",
        "https://openkeys.net/api/premium"
    ],
    "GPT": [
        "https://raw.githubusercontent.com/dan1471/FREE-openai-api-keys/main/keys.txt",
        "https://raw.githubusercontent.com/0xk1h0/OpenAI-API/main/key.txt",
        "https://outlinekeys.com/api/gpt",
        "https://openkeys.net/api/gpt"
    ]
}

prices = {"VPN": 19, "VPN Premium": 39, "GPT": 49}
sub_prices = {"VPN": 149, "VPN Premium": 199, "GPT": 299}

goods = {}
subscriptions = {}
pending_payments = {}

if os.path.exists(goods_file):
    with open(goods_file, "r", encoding="utf-8") as f:
        goods = json.load(f)
else:
    goods = {k: [] for k in prices}

if os.path.exists(subs_file):
    with open(subs_file, "r", encoding="utf-8") as f:
        subscriptions = json.load(f)
else:
    subscriptions = {}

def save_goods():
    with open(goods_file, "w", encoding="utf-8") as f:
        json.dump(goods, f, ensure_ascii=False, indent=2)

def save_subscriptions():
    with open(subs_file, "w", encoding="utf-8") as f:
        json.dump(subscriptions, f, ensure_ascii=False, indent=2)

def update_keys():
    updated = {}
    for category, urls in sources.items():
        if isinstance(urls, str):
            urls = [urls]
        new_keys = []
        for url in urls:
            try:
                r = requests.get(url, timeout=10)
                lines = r.text.splitlines()
                for line in lines:
                    key = line.strip()
                    if key and key not in goods.get(category, []):
                        new_keys.append(key)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {url}: {e}")
        if category not in goods:
            goods[category] = []
        goods[category].extend(new_keys)
        updated[category] = len(new_keys)
    save_goods()
    return updated
def get_payment_markup(category, url=None):
    price = prices.get(category, 0)
    markup = types.InlineKeyboardMarkup()
    if url:
        markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url))
    else:
        payment_url = f"https://yoomoney.ru/quickpay/shop-widget?writer=seller&targets=–ü–æ–∫—É–ø–∫–∞+{category}&default-sum={price}&button-text=11&account=4100119168683765"
        markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–æ–≤–æ", url=payment_url))
    return markup

def get_subscription_markup(category):
    price = sub_prices.get(category, 0)
    markup = types.InlineKeyboardMarkup()
    payment_url = f"https://yoomoney.ru/quickpay/shop-widget?writer=seller&targets=–ü–æ–¥–ø–∏—Å–∫–∞+{category}&default-sum={price}&button-text=11&account=4100119168683765"
    markup.add(types.InlineKeyboardButton("üìÖ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url))
    return markup

def create_payment_link(amount, description, return_url, user_id=None, category=None,
                        customer_email="customer@example.com", customer_phone="+79990001122"):
    url = "https://api.yookassa.ru/v3/payments"
    headers = {
        "Content-Type": "application/json",
        "Idempotence-Key": str(uuid.uuid4())
    }
    auth = ("1097837", "live_ae2ilIIqpXj4eE56lpQb8bLVIGkCIFbtlG7RO_RrO_k")

    data = {
        "amount": {"value": f"{amount:.2f}" if isinstance(amount, float) else str(amount), "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": return_url},
        "capture": True,
        "description": description,
        "receipt": {
            "customer": {
                "email": customer_email,
                "phone": customer_phone
            },
            "items": [
                {
                    "description": description,
                    "quantity": "1.00",
                    "amount": {"value": f"{amount:.2f}" if isinstance(amount, float) else str(amount), "currency": "RUB"},
                    "vat_code": 1
                }
            ]
        }
    }

    try:
        r = requests.post(url, headers=headers, json=data, auth=auth)
        if r.status_code in (200, 201):
            result = r.json()
            print("YooKassa API response:", result)
            payment_id = result.get("id")
            confirmation = result.get("confirmation")
            if confirmation and "confirmation_url" in confirmation:
                confirmation_url = confirmation["confirmation_url"]
                if user_id and category:
                    pending_payments[payment_id] = {"user_id": user_id, "category": category, "time": time.time(), "type": "one_time"}
                return confirmation_url
            else:
                print("–û—à–∏–±–∫–∞: –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ confirmation_url.")
                return None
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {r.status_code} {r.text}")
            return None
    except Exception as e:
        print("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:", e)
        return None

def create_subscription_payment_link(amount, description, return_url, user_id, category,
                                    customer_email="customer@example.com", customer_phone="+79990001122"):
    url = "https://api.yookassa.ru/v3/payments"
    headers = {
        "Content-Type": "application/json",
        "Idempotence-Key": str(uuid.uuid4())
    }
    auth = ("1097837", "live_ae2ilIIqpXj4eE56lpQb8bLVIGkCIFbtlG7RO_RrO_k")

    data = {
        "amount": {"value": f"{amount:.2f}" if isinstance(amount, float) else str(amount), "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": return_url},
        "capture": True,
        "description": description,
        "receipt": {
            "customer": {
                "email": customer_email,
                "phone": customer_phone
            },
            "items": [
                {
                    "description": description,
                    "quantity": "1.00",
                    "amount": {"value": f"{amount:.2f}" if isinstance(amount, float) else str(amount), "currency": "RUB"},
                    "vat_code": 1
                }
            ]
        }
    }

    try:
        r = requests.post(url, headers=headers, json=data, auth=auth)
        if r.status_code in (200, 201):
            result = r.json()
            payment_id = result.get("id")
            confirmation = result.get("confirmation")
            if confirmation and "confirmation_url" in confirmation:
                confirmation_url = confirmation["confirmation_url"]
                if user_id and category:
                    pending_payments[payment_id] = {"user_id": user_id, "category": category, "type": "subscription", "time": time.time()}
                return confirmation_url
            else:
                print("–û—à–∏–±–∫–∞: –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ confirmation_url.")
                return None
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {r.status_code} {r.text}")
            return None
    except Exception as e:
        print("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:", e)
        return None

@bot.message_handler(commands=["start"])
def start(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for c in goods:
        kb.add(types.KeyboardButton(f"üõç –ö—É–ø–∏—Ç—å {c} ({prices[c]}‚ÇΩ)"))
        kb.add(types.KeyboardButton(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ {c} ({sub_prices[c]}‚ÇΩ/–º–µ—Å)"))
    if msg.from_user.id == ADMIN_ID:
        kb.add(types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏"))
        kb.add(types.KeyboardButton("üì¶ –û—Å—Ç–∞—Ç–∫–∏"))
    bot.send_message(msg.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *KeySpace* ‚Äî –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª—é—á–µ–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", parse_mode="Markdown", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text.startswith("üõç –ö—É–ø–∏—Ç—å "))
def buy(msg):
    category = msg.text.replace("üõç –ö—É–ø–∏—Ç—å ", "").split(" (")[0]
    if category not in goods:
        return bot.send_message(msg.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    if not goods[category]:
        return bot.send_message(msg.chat.id, f"üòû –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è {category}.")

    link = create_payment_link(
        prices[category],
        f"–ü–æ–∫—É–ø–∫–∞ {category}",
        "https://t.me/ULBA_bot",
        msg.from_user.id,
        category,
        customer_email=f"user{msg.from_user.id}@example.com",
        customer_phone="+79990001122"
    )
    if link:
        bot.send_message(msg.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{category}*. –°—Ç–æ–∏–º–æ—Å—Ç—å: *{prices[category]}‚ÇΩ*.\n\nüîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", parse_mode="Markdown", reply_markup=get_payment_markup(category, link))
    else:
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")

@bot.message_handler(func=lambda m: m.text.startswith("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ "))
def subscribe(msg):
    category = msg.text.replace("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ ", "").split(" (")[0]
    if category not in goods:
        return bot.send_message(msg.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    link = create_subscription_payment_link(
        sub_prices[category],
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {category} (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)",
        "https://t.me/ULBA_bot",
        msg.from_user.id,
        category,
        customer_email=f"user{msg.from_user.id}@example.com",
        customer_phone="+79990001122"
    )
    if link:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=link))
        bot.send_message(msg.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{category}* –∑–∞ *{sub_prices[category]}‚ÇΩ/–º–µ—Å*.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", parse_mode="Markdown", reply_markup=kb)
    else:
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.")

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏" and m.from_user.id == ADMIN_ID)
def admin_update(msg):
    updated = update_keys()
    text = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n"
    for c, n in updated.items():
        text += f"‚Ä¢ {c}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {n} –∫–ª—é—á–µ–π\n"
    bot.send_message(msg.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏" and m.from_user.id == ADMIN_ID)
def admin_stock(msg):
    text = "–û—Å—Ç–∞—Ç–∫–∏ –∫–ª—é—á–µ–π:\n"
    for c, lst in goods.items():
        text += f"‚Ä¢ {c}: {len(lst)} –∫–ª—é—á–µ–π\n"
    bot.send_message(msg.chat.id, text)

def check_pending_payments():
    auth = ("1097837", "live_ae2ilIIqpXj4eE56lpQb8bLVIGkCIFbtlG7RO_RrO_k")
    while True:
        if not pending_payments:
            time.sleep(10)
            continue
        to_delete = []
        for payment_id, info in list(pending_payments.items()):
            user_id = info["user_id"]
            category = info["category"]
            payment_type = info.get("type", "one_time")
            try:
                url = f"https://api.yookassa.ru/v3/payments/{payment_id}"
                r = requests.get(url, auth=auth)
                if r.status_code == 200:
                    result = r.json()
                    status = result.get("status")
                    if status == "succeeded":
                        if payment_type == "one_time":
                            if goods.get(category) and goods[category]:
                                key = goods[category].pop(0)
                                save_goods()
                                try:
                                    bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∫–ª—é—á –¥–ª—è *{category}*:\n`{key}`", parse_mode="Markdown")
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                to_delete.append(payment_id)
                            else:
                                try:
                                    bot.send_message(user_id, f"üòû –ö–ª—é—á–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                                except:
                                    pass
                                to_delete.append(payment_id)
                        elif payment_type == "subscription":
                            now = time.time()
                            if user_id not in subscriptions:
                                subscriptions[user_id] = {}
                            subscriptions[user_id][category] = {"last_time": now}
                            save_subscriptions()
                            try:
                                bot.send_message(user_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ *{category}* –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ö–ª—é—á–∏ –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.", parse_mode="Markdown")
                            except:
                                pass
                            to_delete.append(payment_id)
                    elif status in ("canceled", "failed"):
                        try:
                            bot.send_message(user_id, f"‚ùå –ü–ª–∞—Ç—ë–∂ {category} –Ω–µ –ø—Ä–æ—à—ë–ª.")
                        except:
                            pass
                        to_delete.append(payment_id)
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {r.status_code} {r.text}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        for pid in to_delete:
            pending_payments.pop(pid, None)
        time.sleep(30)

def check_and_deliver_subscriptions():
    while True:
        now = time.time()
        for user_id in list(subscriptions.keys()):
            for category in list(subscriptions[user_id].keys()):
                last = subscriptions[user_id][category].get("last_time", 0)
                if now - last >= 30 * 86400:  # 30 –¥–Ω–µ–π
                    if goods.get(category) and goods[category]:
                        key = goods[category].pop(0)
                        subscriptions[user_id][category]["last_time"] = now
                        save_goods()
                        save_subscriptions()
                        try:
                            bot.send_message(user_id, f"üîÑ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ *{category}* –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á:\n`{key}`", parse_mode="Markdown")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    else:
                        try:
                            bot.send_message(user_id, f"üòû –ö–ª—é—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {category} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                        except:
                            pass
        time.sleep(3600)

if __name__ == "__main__":
    threading.Thread(target=check_pending_payments, daemon=True).start()
    threading.Thread(target=check_and_deliver_subscriptions, daemon=True).start()
    bot.infinity_polling()