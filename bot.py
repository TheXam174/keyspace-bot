import telebot
import json
import os
import requests
import time
import threading
import uuid
from telebot import types
from datetime import datetime
import re

# üîë –¢–æ–∫–µ–Ω, –∞–¥–º–∏–Ω, username
TOKEN = "7584995126:AAFY5RMpeJW2pJzSy2ul6uaSslB5Jnyhxh4"
ADMIN_ID = 6668575839
bot = telebot.TeleBot(TOKEN)

# üóÇÔ∏è –§–∞–π–ª—ã
goods_file = "goods.json"
subs_file = "subscriptions.json"

# üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–ü—É–Ω–∫—Ç 4 ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
sources = {
    "VPN": [
        "https://openproxylist.com/",
        "https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt",
        "https://raw.githubusercontent.com/dan1471/FREE-VPN/main/vpn.txt",
        "https://outlinekeys.com/api/vpn",
        "https://openkeys.net/api/vpn"
    ],
    "VPN Premium": [
        "https://outlinekeys.com/api/premium",
        "https://openkeys.net/api/premium"
    ],
    "GPT": [
        "https://raw.githubusercontent.com/dan1471/FREE-openai-api-keys/main/keys.txt",
        "https://raw.githubusercontent.com/0xk1h0/OpenAI-API/main/key.txt",
        "https://outlinekeys.com/api/gpt",
        "https://openkeys.net/api/gpt"
    ]
}

# üíµ –¶–µ–Ω—ã
prices = {"VPN": 19, "VPN Premium": 39, "GPT": 49}
sub_prices = {"VPN": 149, "VPN Premium": 199, "GPT": 299}

# üì¶ –î–∞–Ω–Ω—ã–µ
goods = {k: [] for k in prices}
subscriptions = {}
pending_payments = {}

if os.path.exists(goods_file):
    with open(goods_file, "r", encoding="utf-8") as f:
        goods.update(json.load(f))

if os.path.exists(subs_file):
    with open(subs_file, "r", encoding="utf-8") as f:
        subscriptions = json.load(f)

def save_goods():
    with open(goods_file, "w", encoding="utf-8") as f:
        json.dump(goods, f, ensure_ascii=False, indent=2)

def save_subscriptions():
    with open(subs_file, "w", encoding="utf-8") as f:
        json.dump(subscriptions, f, ensure_ascii=False, indent=2)

# üßº –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–ü—É–Ω–∫—Ç 3 ‚Äî –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
def is_valid_key(cat, line):
    line = line.strip()
    if any(tag in line.lower() for tag in ["<html", "<!doctype", "</body", "</head", "<script", "error", "not found"]):
        return False
    if cat == "GPT":
        return bool(re.match(r"^sk-[A-Za-z0-9]{20,}$", line))
    return bool(re.match(r"^[A-Za-z0-9.\-_:@]{20,}$", line))

# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ü—É–Ω–∫—Ç 5 ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
def update_keys():
    updated = {}
    for cat, urls in sources.items():
        new_keys = []
        for url in urls:
            try:
                r = requests.get(url, timeout=10)
                for line in r.text.splitlines():
                    k = line.strip()
                    if is_valid_key(cat, k) and k not in goods[cat] and k not in new_keys:
                        new_keys.append(k)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {url}: {e}")
        goods[cat].extend(new_keys)
        goods[cat] = list(set(goods[cat]))
        updated[cat] = len(new_keys)
    save_goods()
    return updated

# üí≥ YooKassa
def create_payment_link(amount, desc, return_url, user_id, category, subscription=False):
    url = "https://api.yookassa.ru/v3/payments"
    auth = ("1097837", "live_ae2ilIIqpXj4eE56lpQb8bLVIGkCIFbtlG7RO_RrO_k")
    headers = {"Content-Type": "application/json", "Idempotence-Key": str(uuid.uuid4())}
    data = {
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": return_url},
        "capture": True,
        "description": desc,
        "receipt": {
            "customer": {"email": f"user{user_id}@example.com", "phone": "+70000000000"},
            "items": [{"description": desc, "quantity": "1.00", "amount": {"value": f"{amount:.2f}", "currency": "RUB"}, "vat_code": 1}]
        }
    }
    r = requests.post(url, headers=headers, json=data, auth=auth)
    if r.status_code in (200,201):
        res = r.json()
        link = res.get("confirmation", {}).get("confirmation_url")
        pid = res.get("id")
        if link and pid:
            tp = "subscription" if subscription else "one_time"
            pending_payments[pid] = {"user_id": user_id, "category": category, "time": time.time(), "type": tp}
            return link
    return None

def get_payment_markup(link):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=link))
    return markup

# üì≤ –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def cmd_start(m):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in prices:
        kb.add(f"üõç –ö—É–ø–∏—Ç—å: {cat} ({prices[cat]}‚ÇΩ)", f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {cat} ({sub_prices[cat]}‚ÇΩ/–º–µ—Å)")
    if m.from_user.id == ADMIN_ID:
        for cat in prices:
            kb.add(f"üéÅ –ê–¥–º–∏–Ω-–∫–ª—é—á: {cat}", f"üé´ –ê–¥–º–∏–Ω-–ø–æ–¥–ø–∏—Å–∫–∞: {cat}")
        kb.add("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏", "üì¶ –û—Å—Ç–∞—Ç–∫–∏")
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª—é—á–µ–π:\n\n"
        "üõç *–†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞* ‚Äî –æ—Ç 19‚ÇΩ\n"
        "üìÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–¥–æ—Å—Ç–∞–≤–∫–æ–π* ‚Äî –æ—Ç 149‚ÇΩ/–º–µ—Å\n\n"
        "üîê –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "‚Ä¢ VPN ‚Äî 19‚ÇΩ / 149‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ VPN Premium ‚Äî 39‚ÇΩ / 199‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ GPT ‚Äî 49‚ÇΩ / 299‚ÇΩ/–º–µ—Å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text and m.text.startswith("üõç –ö—É–ø–∏—Ç—å: "))
def buy(m):
    try:
        cat = m.text.split(": ")[1].split(" (")[0]
        if not goods.get(cat):
            return bot.reply_to(m, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏.")
        link = create_payment_link(prices[cat], f"–ü–æ–∫—É–ø–∫–∞ {cat}", "https://t.me/ULBA_bot", m.from_user.id, cat)
        if link:
            bot.send_message(m.chat.id, f"üîπ –ö—É–ø–∏—Ç—å {cat} –∑–∞ {prices[cat]}‚ÇΩ", reply_markup=get_payment_markup(link))
        else:
            bot.send_message(m.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.")
    except:
        bot.send_message(m.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@bot.message_handler(func=lambda m: m.text and m.text.startswith("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: "))
def sub(m):
    try:
        cat = m.text.split(": ")[1].split(" (")[0]
        link = create_payment_link(sub_prices[cat], f"–ü–æ–¥–ø–∏—Å–∫–∞ {cat}", "https://t.me/ULBA_bot", m.from_user.id, cat, subscription=True)
        if link:
            bot.send_message(m.chat.id, f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {cat} –∑–∞ {sub_prices[cat]}‚ÇΩ/–º–µ—Å", reply_markup=get_payment_markup(link))
        else:
            bot.send_message(m.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    except:
        bot.send_message(m.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏" and m.from_user.id == ADMIN_ID)
def cmd_update(m):
    upd = update_keys()
    txt = "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n" + "\n".join(f"{c}: +{n}" for c,n in upd.items())
    bot.send_message(m.chat.id, txt)

@bot.message_handler(func=lambda m: m.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏" and m.from_user.id == ADMIN_ID)
def cmd_stock(m):
    txt = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –∫–ª—é—á–µ–π:\n" + "\n".join(f"{c}: {len(goods.get(c,[]))}" for c in goods)
    bot.send_message(m.chat.id, txt)

@bot.message_handler(func=lambda m: m.text and m.text.startswith("üéÅ –ê–¥–º–∏–Ω-–∫–ª—é—á: ") and m.from_user.id == ADMIN_ID)
def admin_get_key(m):
    cat = m.text.split(": ")[1]
    if not goods.get(cat):
        return bot.reply_to(m, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏.")
    key = goods[cat].pop(0)
    save_goods()
    bot.send_message(m.chat.id, f"üõ† –í–∞—à –∫–ª—é—á ({cat}):\n`{key}`", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text and m.text.startswith("üé´ –ê–¥–º–∏–Ω-–ø–æ–¥–ø–∏—Å–∫–∞: ") and m.from_user.id == ADMIN_ID)
def admin_subscribe(m):
    cat = m.text.split(": ")[1]
    subscriptions.setdefault(str(m.from_user.id), {})[cat] = {"last_time": time.time()}
    save_subscriptions()
    bot.send_message(m.chat.id, f"üõ† –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {cat} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ).")

# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
def check_payments():
    auth = ("1097837", "live_ae2ilIIqpXj4eE56lpQb8bLVIGkCIFbtlG7RO_RrO_k")
    while True:
        for pid, info in list(pending_payments.items()):
            try:
                r = requests.get(f"https://api.yookassa.ru/v3/payments/{pid}", auth=auth)
                if r.status_code == 200:
                    status = r.json().get("status")
                    uid, cat, tp = info["user_id"], info["category"], info["type"]
                    if status == "succeeded":
                        if tp == "one_time":
                            if goods.get(cat):
                                key = goods[cat].pop(0)
                                save_goods()
                                bot.send_message(uid, f"‚úÖ –í–∞—à –∫–ª—é—á:\n`{key}`", parse_mode="Markdown")
                        else:
                            subscriptions.setdefault(str(uid), {})[cat] = {"last_time": time.time()}
                            save_subscriptions()
                            bot.send_message(uid, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {cat} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
                        pending_payments.pop(pid)
                    elif status in ("canceled", "failed"):
                        bot.send_message(uid, "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª.")
                        pending_payments.pop(pid)
            except: pass
        time.sleep(10)

# üì¨ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
def deliver_subs():
    while True:
        now = time.time()
        for uid, cats in subscriptions.items():
            for cat, data in cats.items():
                if now - data["last_time"] >= 30 * 86400:
                    if goods.get(cat):
                        key = goods[cat].pop(0)
                        save_goods()
                        subscriptions[uid][cat]["last_time"] = now
                        save_subscriptions()
                        bot.send_message(int(uid), f"üÜï –ù–æ–≤—ã–π –∫–ª—é—á –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {cat}:\n`{key}`", parse_mode="Markdown")
        time.sleep(3600)

# ‚è±Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
def auto_update_loop():
    while True:
        update_keys()
        time.sleep(3600)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(target=check_payments, daemon=True).start()
    threading.Thread(target=deliver_subs, daemon=True).start()
    threading.Thread(target=auto_update_loop, daemon=True).start()
    bot.infinity_polling()
